;;; lunary.el --- Helpers for config files      -*- lexical-binding: t; -*-

;; Author: Yuan Fu <casouri@gmail.com>

;;; This file is NOT part of GNU Emacs

;;; Commentary:
;;
;; Variables, functions and macros used by config files.

;;; Code:

(require 'cowboy)
(require 'luna-load-package)
(require 'luna-key)

;;; Variables

(defvar luna-data-dir (expand-file-name "var" user-emacs-directory))

(defvar luna-package-list nil
  "List of package symbols. Added by ‘load-package’.")

(defvar luna-external-program-list nil
  "List of external programs needed. Added by ‘load-package’.
Each element is a file path or program name (string).")

(defvar luna-external-program-notes nil
  "An alist of (PROGRAM . NOTES).
PROGRAM is a string representing the command line program. NOTES
is a string containing the notes. It must not start or end with a
newline.")

(defvar luna-dumped nil
  "non-nil when a dump file is loaded.
(Because dump.el sets this variable to t.)")

(defvar luna-dumped-load-path nil
  "By default dump files doesn’t save ‘load-path’.
We need to manually save and restore it. See manual for more info.")

(defvar luna-env-vars nil
  "When dumping, load environment from shell into this variable.
At startup, load environment from this variable.")

(defvar luna-dump-location-alist
  '((Emacs
     "/Users/yuan/emacs-head/nextstep/Emacs.app/Contents/MacOS/Emacs"
     "/Users/yuan/emacs-head/nextstep/Emacs.app/Contents/MacOS/Emacs.pdmp"
     "/Users/yuan/emacs-head/nextstep/Emacs.app/Contents/MacOS/libexec/Emacs.pdmp")
    (Emacs-27
     "/Applications/Emacs 27.app/Contents/MacOS/Emacs"
     "/Applications/Emacs 27.app/Contents/MacOS/Emacs.pdmp"
     "/Applications/Emacs 27.app/Contents/MacOS/libexec/Emacs.pdmp"))
  "An alist of (Name . LOCATION-LIST).
LOCATION-LIST is (BINARY-PATH ORIGINAL-DUMP-PATH DUMP-PATH).
BINARY-PATH is the path to the Emacs binary, DUMP-PATH is the
path to the dump file, ORIGINAL-DUMP-PATH is the path to the
original dump file generated by the compile process.")

(defvar luna-font-settings nil
  "A list of (FACE . FONT-NAME).
FONT-NAMEs are keys in ‘luna-font-alist’.")

(defvar luna-cjk-rescale-alist
  '(("Source Han Serif SC" . 1.3)
    ;; ("Source Han Sans SC" . 1.3)
    ("FZFW ZhuZi MinchoS" . 1.3))
  "A list of font names that should be rescaled.")

(defvar luna-font-alist
  `(("SF Mono" . ("SF Mono" "Source Han Serif" 1.3))
    ("IBM Plex Mono" . ("IBM Plex Mono" "Source Han Serif" 1.2))
    ("SF Pro Text" . ("SF Pro Text" "Source Han Serif" 1.1))
    ("IBM Plex Sans" . ("IBM Plex Sans" "Source Han Serif" 1.1))
    ("Dossier" . ("Dossier" "Source Han Serif" 1.3))

    ("方正fW筑紫明朝" . (nil "FZFW ZhuZi MinchoS" 1))
    ("Source Han Serif" . (nil "Source Han Serif" 1))
    ("Source Han Sans" . (nil "Source Han Sans" 1))

    ("Charter 13" . ("Charter" nil 1 :size 13))
    ("GNU Unifont 15" . ("Unifont" nil 1 :size 15))
    ("SF Mono Light 13" . ("SF Mono" nil 1 :size 13 :weight light))
    ("PragmataPro 13" . ("PragmataPro Mono" nil 1 :size 13))
    ("Iosevka 13" . ("Iosevka" nil :size 14))
    ("JetBrains Mono 12" . ("JetBrains Mono" nil 1 :size 12))
    ("Roboto Mono 12" . ("Roboto Mono" nil 1 :size 12 :weight light)))
  "An alist of all the fonts you can switch between by `luna-load-font'.
Each element is like

    (FONT-NAME . (ASCII-NAME CJK-NAME CJK-SCALE))

FONT-NAME is the display name, ASCII-NAME is the ASCII font
family name, CJK-NAME is the CJK font family name, CJK-SCALE is
the CJK font rescale ratio.")

(defvar luna-load-theme-hook nil
  "Hook run after ‘luna-load-theme’.")

;;; Package functions

(defun luna-install-all ()
  "Install all required packages."
  (interactive)
  (display-buffer "*Messages*")
  (dolist (package luna-package-list)
    (unless (cowgirl-installed-p package)
      (cowgirl-install package))))

;;; Config helpers

(defun luna-safe-load (file &rest args)
  "Load FILE and don’t error out.
If FILE doesn’t exist, create it.
ARGS is as same as in `load'."
  (if (file-exists-p file)
      (condition-case err
          (apply #'load file args)
        ((debug error) (warn "Error when loading %s: %s" file
                             (error-message-string err))))
    ;; Create file.
    (write-region "" nil file)))

(defun luna-load-relative (file &rest args)
  "Load FILE relative to user-emacs-directory.
ARGS are applied to ‘load'."
  (apply #'luna-safe-load
         (expand-file-name file user-emacs-directory) args))

(defmacro luna-lsp/eglot (lsp eglot)
  "Run LSP or EGLOT based on `luna-lsp'."
  `(pcase luna-lsp
     ('lsp ,lsp)
     ('eglot ,eglot)))

(defmacro luna-when-mac (&rest body)
  "Evaluate BODY when in a Mac system."
  `(when (eq system-type 'darwin)
     ,@body))

(defmacro luna-when-linux (&rest body)
  "Evaluate BODY when in a GNU/Linux system."
  `(when (eq system-type 'gnu/linux)
     ,@body))

(defmacro luna-if-dump (then &rest else)
  "Evaluate THEN if running with a dump file, else evaluate ELSE."
  (declare (indent 1))
  `(if luna-dumped
       ,then
     ,@else))

(defmacro luna-on (host &rest body)
  "Evaluate BODY when running on HOST.
HOST can be a string or a list of strings.
You can see your host name by

    $ hostname

and change it with

    $ hostname <new name>

To make the change persist reboot, use

    $ scutil --set HostName <new name>"
  (declare (indent 1))
  `(when (if (stringp ,host)
             (equal ,host (system-name))
           (member (system-name) ,host))
     ,@body))

;;; Dump

(defun luna-dump (emacs-location dump-location orig-dump-location)
  "Dump Emacs.
Run Emacs at EMACS-LOCATION and dump to DUMP-LOCATION.
ORIG-DUMP-LOCATION is location of the original pre-built dump."
  (interactive
   (alist-get (intern (completing-read
                       "Location: "
                       (mapcar (lambda (elt)
                                 (symbol-name (car elt)))
                               luna-dump-location-alist)))
              luna-dump-location-alist))
  (let ((buf "*dump process*"))
    (delete-file dump-location)
    (make-process
     :name "dump"
     :buffer buf
     :command
     (list emacs-location
           "--batch" "-Q"
           "--dump-file" orig-dump-location
           "--eval"
           ;; Don’t add quote around!
           (format "(setq luna-dump-file \"%s\")" dump-location)
           "-l" (luna-f-join user-emacs-directory
                             "dump.el")))
    (display-buffer buf)))

;;; External program

(defun luna-check-external-program (distribution)
  "Check if external programs are available.
Distribution is the current package distribution (symbol), it can be
guix, macports, debian, etc."
  (interactive (list (intern (completing-read "Distribution: "
                                              '(guix macports debian)))))
  (pop-to-buffer (get-buffer-create "*external program*"))
  (let ((inhibit-read-only t))
    (erase-buffer)
    (cl-loop for program in luna-external-program-list
             if (not (or (executable-find program)
                         (file-exists-p program)))
             do (let ((note (alist-get program
                                       luna-external-program-notes
                                       nil nil #'equal)))
                  (insert program " is not available")
                  (if note
                      (insert ", it has a note:\n\t"
                              (string-join (split-string note "\n")
                                           "\n\t")
                              "\n")
                    (insert "\n"))))
    (when (eq (point) (point-min))
      (insert "All good\n"))
    (special-mode)))

(defun luna-note-extern (program notes)
  "Set the note for PROGRAM to NOTES.
See ‘luna-external-program-notes’."
  (declare (indent 1))
  (setf (alist-get program luna-external-program-notes
                   nil nil #'equal)
        notes))

;;; Theme

(defun luna-load-theme (theme)
  "Load THEME or `luna-theme'."
  (dolist (theme custom-enabled-themes)
    (disable-theme theme))
  (if (featurep (intern (format "%s-theme" theme)))
      ;; We can save a lot of time by only enabling the theme.
      (enable-theme theme)
    (load-theme theme t))
  (custom-set-variables
   `(luna-theme ,theme nil nil
                "Automatically saved by ‘luna-load-theme’"))
  (custom-save-all)
  (run-hooks 'luna-load-theme-hook))

;;; Font

(defun luna-create-fontset (ascii-spec cjk-spec)
  "Create a fontset NAME with ASCII-SPEC and CJK-SPEC font."
  (let* ((fontset-name
          (concat "fontset-" (downcase (plist-get ascii-spec :family))))
         ;; ASCII font.
         (fontset
          (create-fontset-from-fontset-spec
           (font-xlfd-name
            (apply #'font-spec :registry fontset-name ascii-spec)))))
    ;; CJK font.
    (dolist (charset '(kana han cjk-misc))
      (set-fontset-font fontset charset (apply #'font-spec cjk-spec)))
    fontset))

(defun luna-font-name-to-spec (font-name size &rest attrs)
  "Translate FONT-NAME, SIZE and ATTRS to (ASCII-SPEC CJK-SPEC)."
  (let* ((font-spec (if (null font-name)
                        (cdar luna-font-alist)
                      (alist-get font-name luna-font-alist
                                 nil nil #'equal)))
         (ascii-family (nth 0 font-spec))
         (cjk-family (nth 1 font-spec))
         (cjk-scale (nth 2 font-spec))
         (rest-spec (append (nthcdr 3 font-spec) attrs))
         ;; (rest-spec (setf (plist-get rest-spec :size) size))
         (ascii-rest-spec (append `(:size ,size) rest-spec))
         (cjk-rest-spec (append `(:size ,(* cjk-scale size))
                                rest-spec))
         (ascii-spec (and ascii-family
                          `(:family ,ascii-family ,@ascii-rest-spec)))
         (cjk-spec (and cjk-family
                        `(:family ,cjk-family ,@cjk-rest-spec))))
    (list ascii-spec cjk-spec)))

(defun luna-load-default-font (font-name size &rest attrs)
  "Set font for default face to FONT-NAME with SIZE and ATTRS.
See ‘luna-load-font’."
  ;; We use a separate function for default font because Emacs has a
  ;; bug that prevents us from setting a fontset for the default face
  ;; (although ‘set-frame-parameter’ works). So we just set default
  ;; face with ASCII font and use default fontset for Unicode font.
  (interactive
   (list (completing-read
          "Font: " (mapcar #'car luna-font-alist))
         (string-to-number (completing-read
                            "Size: " nil nil nil nil nil "13"))))
  (let* ((specs (apply #'luna-font-name-to-spec font-name size attrs))
         (ascii (apply #'font-spec (car specs)))
         (cjk (apply #'font-spec (cadr specs))))
    (set-face-attribute 'default nil :font ascii)
    (set-fontset-font t 'kana cjk)
    (set-fontset-font t 'han cjk)
    (set-fontset-font t 'cjk-misc cjk)
    (set-fontset-font t 'symbol cjk nil 'append)))

(defun luna-load-font (face font-name size &rest attrs)
  "Set font for FACE to FONT-NAME.
If FONT-NAME is nil, use the first font in ‘luna-font-alist’.
SIZE is the font size in pt. Add additional face attributes in
ATTRS.

Use ‘luna-save-font-settings’ to save font settings and use
‘luna-load-saved-font’ to load them next time."
  (interactive
   (list (intern (completing-read
                  "Face: " (face-list)))
         (completing-read
          "Font: " (mapcar #'car luna-font-alist))
         (string-to-number (completing-read
                            "Size: " nil nil nil nil nil "13"))))
  (if (and (eq face 'default))
      (apply #'luna-load-default-font font-name size attrs)
    (let* ((fontset
            (apply #'luna-create-fontset
                   (apply #'luna-font-name-to-spec font-name size attrs))))
      (apply #'set-face-attribute face nil
             :font fontset
             :fontset fontset
             attrs)))
  ;; Save the settings.
  (setf (alist-get face luna-font-settings) `(,font-name ,size ,@attrs))
  (custom-set-variables
   `(luna-font-settings
	 ',luna-font-settings
	 nil nil "Automatically saved by ‘luna-load-font’")))

(defun luna-save-font-settings ()
  "Save font-settings set by ‘luna-load-font’."
  (interactive)
  (custom-save-all))

(defun luna-load-saved-font ()
  "Load font settings saved in ‘luna-font-settings’."
  (dolist (setting luna-font-settings)
	(apply #'luna-load-font setting)))

(define-minor-mode luna-scale-cjk-mode
  "Scale CJK font to align CJK font and ASCII font."
  :lighter ""
  :global t
  :group 'luna
  (dolist (setting luna-cjk-rescale-alist)
	(setf (alist-get (car setting)
                     face-font-rescale-alist nil nil #'equal)
		  (if luna-scale-cjk-mode (cdr setting) nil))))

(defun luna-enable-apple-emoji ()
  "Enable Apple emoji display."
  (set-fontset-font t 'emoji (font-spec :family "Apple Color Emoji")
                    nil 'prepend))


(provide 'lunary)

;;; lunary.el ends here
