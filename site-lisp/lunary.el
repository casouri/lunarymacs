;;; lunary.el --- Helpers for config files      -*- lexical-binding: t; -*-

;; Author: Yuan Fu <casouri@gmail.com>

;;; This file is NOT part of GNU Emacs

;;; Commentary:
;;
;; Variables, functions and macros used by config files.

;;; Code:

(require 'cowboy)
(require 'luna-load-package)
(require 'luna-key)

;;; Variables

(defvar luna-data-dir (expand-file-name "var" user-emacs-directory))

(defvar luna-package-list nil
  "List of package symbols. Added by ‘load-package’.")

(defvar luna-external-program-list nil
  "List of external programs needed. Added by ‘load-package’.
Each element is a file path or program name (string).")

(defvar luna-external-program-notes nil
  "An alist of (PROGRAM . NOTES).
PROGRAM is a string representing the command line program. NOTES
is a string containing the notes. It must not start or end with a
newline.")

(defvar luna-dumped nil
  "non-nil when a dump file is loaded.
(Because dump.el sets this variable to t.)")

(defvar luna-dumped-load-path nil
  "By default dump files doesn’t save ‘load-path’.
We need to manually save and restore it. See manual for more info.")

(defvar luna-env-vars nil
  "When dumping, load environment from shell into this variable.
At startup, load environment from this variable.")

(defvar luna-dump-location-alist
  '((Emacs
     "/Users/yuan/emacs-head/nextstep/Emacs.app/Contents/MacOS/Emacs"
     "/Users/yuan/emacs-head/nextstep/Emacs.app/Contents/MacOS/Emacs.pdmp"
     "/Users/yuan/emacs-head/nextstep/Emacs.app/Contents/MacOS/libexec/Emacs.pdmp")
    (Emacs-27
     "/Applications/Emacs 27.app/Contents/MacOS/Emacs"
     "/Applications/Emacs 27.app/Contents/MacOS/Emacs.pdmp"
     "/Applications/Emacs 27.app/Contents/MacOS/libexec/Emacs.pdmp"))
  "An alist of (Name . LOCATION-LIST).
LOCATION-LIST is (BINARY-PATH ORIGINAL-DUMP-PATH DUMP-PATH).
BINARY-PATH is the path to the Emacs binary, DUMP-PATH is the
path to the dump file, ORIGINAL-DUMP-PATH is the path to the
original dump file generated by the compile process.")

(defvar luna-font-alist
  `(("SF Mono" "SF Mono" "Source Han Serif SC" 1.3)
    ("IBM Plex Mono" "IBM Plex Mono" "Source Han Serif SC" 1.2)
    ("SF Pro Text" "SF Pro Text" "Source Han Serif SC" 1)
    ("IBM Plex Sans" "IBM Plex Sans" "Source Han Sans SC" 1
     (:weight medium) (:weight regular))
    ("Dossier" "Dossier" "Source Han Serif SC" 1.3)
    ("Academica" "Academica" "Source Han Serif SC" 1)
    ("Boritina" "aaa_Boritina" "Source Han Serif SC" 1)
    ("Consolas" "Consolas" "Source Han Sans SC" 1)
    ("Cascadia" "Cascadia Mono" "Source Han Sans SC" 1)

    ("SF Mono w/o scaling" "SF Mono" "Source Han Serif SC" 1)
    ("IBM Plex Mono w/o scaling" "IBM Plex Mono" "Source Han Serif SC" 1)

    ("方正FW筑紫明朝" nil "FZFW ZhuZi MinchoS" 1)
    ("Source Han Serif" nil "Source Han Serif SC" 1)
    ("Source Han Sans" nil "Source Han Sans SC" 1)

    ("Charter 13" "Charter" nil 1 (:size 13) (:size 13))
    ("GNU Unifont 15" "Unifont" nil 1 (:size 15) (:size 15))
    ("PragmataPro" "PragmataPro Mono" "Source Han Sans" 1))
  "An alist of all the fonts you can switch between by `luna-load-font'.
Each element is like

    (FONT-NAME . (ASCII-NAME CJK-NAME CJK-SCALE ASCII-SPEC CJK-SPEC))

FONT-NAME is the display name, ASCII-NAME is the ASCII font
family name, CJK-NAME is the CJK font family name, CJK-SCALE is
the CJK font rescale ratio. ASCII-SPEC and CJK-SPEC are
additional font spec for ASCII and CJK font.")

(defvar luna-load-theme-hook nil
  "Hook run after ‘luna-load-theme’.")

;;; Package functions

(defun luna-install-all ()
  "Install all required packages."
  (interactive)
  (display-buffer "*Messages*")
  (dolist (package luna-package-list)
    (unless (cowgirl-installed-p package)
      (cowgirl-install package))))

;;; Config helpers

(defun luna-safe-load (file &rest args)
  "Load FILE and don’t error out.
If FILE doesn’t exist, create it.
ARGS is as same as in `load'."
  (if (file-exists-p file)
      (condition-case err
          (apply #'load file args)
        ((debug error) (warn "Error when loading %s: %s" file
                             (error-message-string err))))
    ;; Create file.
    (write-region "" nil file)))

(defun luna-load-relative (file &rest args)
  "Load FILE relative to user-emacs-directory.
ARGS are applied to ‘load'."
  (apply #'luna-safe-load
         (expand-file-name file user-emacs-directory) args))

(defmacro luna-lsp/eglot (lsp eglot)
  "Run LSP or EGLOT based on `luna-lsp'."
  `(pcase luna-lsp
     ('lsp ,lsp)
     ('eglot ,eglot)))

(defmacro luna-when-mac (&rest body)
  "Evaluate BODY when in a Mac system."
  `(when (eq system-type 'darwin)
     ,@body))

(defmacro luna-when-linux (&rest body)
  "Evaluate BODY when in a GNU/Linux system."
  `(when (eq system-type 'gnu/linux)
     ,@body))

(defmacro luna-if-dump (then &rest else)
  "Evaluate THEN if running with a dump file, else evaluate ELSE."
  (declare (indent 1))
  `(if luna-dumped
       ,then
     ,@else))

(defmacro luna-on (host &rest body)
  "Evaluate BODY when running on HOST.
HOST can be a string or a list of strings.
You can see your host name by

    $ hostname

and change it with

    $ hostname <new name>

To make the change persist reboot, use

    $ scutil --set HostName <new name>"
  (declare (indent 1))
  `(when (if (stringp ,host)
             (equal ,host (system-name))
           (member (system-name) ,host))
     ,@body))

(defun luna-run-server ()
  "Run server in idle timer."
  (run-with-idle-timer
   3 nil (lambda ()
           (require 'server)
           (unless (server-running-p)
             (server-start t t)))))

;;; Dump

(defun luna-dump (emacs-location dump-location orig-dump-location)
  "Dump Emacs.
Run Emacs at EMACS-LOCATION and dump to DUMP-LOCATION.
ORIG-DUMP-LOCATION is location of the original pre-built dump."
  (interactive
   (alist-get (intern (completing-read
                       "Location: "
                       (mapcar (lambda (elt)
                                 (symbol-name (car elt)))
                               luna-dump-location-alist)))
              luna-dump-location-alist))
  (let ((buf "*dump process*"))
    (delete-file dump-location)
    (make-process
     :name "dump"
     :buffer buf
     :command
     (list emacs-location
           "--batch" "-Q"
           "--dump-file" orig-dump-location
           "--eval"
           ;; Don’t add quote around!
           (format "(setq luna-dump-file \"%s\")" dump-location)
           "-l" (luna-f-join user-emacs-directory
                             "dump.el")))
    (display-buffer buf)))

;;; External program

(defun luna-check-external-program ()
  "Check if external programs are available."
  (interactive)
  (pop-to-buffer (get-buffer-create "*external program*"))
  (let ((inhibit-read-only t))
    (erase-buffer)
    (cl-loop for program in luna-external-program-list
             if (not (or (executable-find program)
                         (file-exists-p program)))
             do (let ((note (alist-get program
                                       luna-external-program-notes
                                       nil nil #'equal)))
                  (insert program " is not available")
                  (if note
                      (insert ", it has a note:\n\t"
                              (string-join (split-string note "\n")
                                           "\n\t")
                              "\n")
                    (insert "\n"))))
    (when (eq (point) (point-min))
      (insert "All good\n"))
    (special-mode)))

(defun luna-note-extern (program notes)
  "Set the note for PROGRAM to NOTES.
See ‘luna-external-program-notes’."
  (declare (indent 1))
  (setf (alist-get program luna-external-program-notes
                   nil nil #'equal)
        notes))

;;; Theme

(defun luna-load-theme (theme)
  "Load THEME or `luna-theme'."
  (interactive
   (list
    (intern (completing-read "Theme: "
                             (mapcar #'symbol-name
                                     (custom-available-themes))))))
  (dolist (theme custom-enabled-themes)
    (disable-theme theme))
  (if (featurep (intern (format "%s-theme" theme)))
      ;; We can save a lot of time by only enabling the theme.
      (enable-theme theme)
    (load-theme theme t))
  (custom-set-variables
   `(luna-theme ,theme nil nil
                "Automatically saved by ‘luna-load-theme’"))
  (custom-save-all)
  (run-hooks 'luna-load-theme-hook))

;;; Font

(defun luna-create-fontset (ascii-spec cjk-spec)
  "Create a fontset NAME with ASCII-SPEC and CJK-SPEC font."
  (let* ((font-hash (sxhash (list ascii-spec cjk-spec)))
         ;; If two fontset have the same ASCII spec and different CJK
         ;; spec, the fontset description is the same, we need to
         ;; differentiate between the two, hence the hash.
         (fontset-name
          (format "fontset-%s+%x"
                  (downcase (plist-get ascii-spec :family))
                  ;; Don’t want negative sign ("-").
                  (abs font-hash)))
         ;; ASCII font.
         (fontset
          (create-fontset-from-fontset-spec
           (font-xlfd-name
            (apply #'font-spec :registry fontset-name ascii-spec)))))
    ;; CJK font.
    (dolist (charset '(kana han cjk-misc))
      (set-fontset-font fontset charset (apply #'font-spec cjk-spec)))
    fontset))

(defun luna-font-expand-spec (font-spec size)
  "Translate FONT-SPEC, SIZE and ATTRS to (ASCII-SPEC CJK-SPEC).

FONT-SPEC should be a list (ASCII-FAMILY CJK-FAMILY CJK-SCALE
ASCII-SPEC CJK-SPEC), where ASCII-FAMILY is a ASCII font family,
CJK-FAMILY is the CJK font family, and SCJK-SCALE is the scale
factor of CJK font. ASCII-SPEC and CJK-SPEC are extra spec for
ASCII and CJK.

If CJK is nil, the returned CJK-SPEC is nil. If SIZE is nil,
don’t add size attributes to the two font spec. If SIZE or
SCJK-SCALE is nil, don’t add size attributes to the CJK spec."
  (let* ((ascii-family (nth 0 font-spec))
         (cjk-family (nth 1 font-spec))
         (cjk-scale (nth 2 font-spec))
         (ascii-extra-spec
          (and size (append `(:size ,size) (nth 3 font-spec))))
         (cjk-extra-spec
          (and size cjk-scale (append `(:size ,(* cjk-scale size))
                                      (nth 4 font-spec))))
         (ascii-spec (and ascii-family
                          `(:family ,ascii-family ,@ascii-extra-spec)))
         (cjk-spec (and cjk-family
                        `(:family ,cjk-family ,@cjk-extra-spec))))
    (list ascii-spec cjk-spec)))

(defun luna-load-default-font (font-spec size &rest attrs)
  "Set font for default face to FONT-SPEC with SIZE and ATTRS.
See ‘luna-load-font’."
  ;; We use a separate function for default font because Emacs has a
  ;; bug that prevents us from setting a fontset for the default face
  ;; (although ‘set-frame-parameter’ works). So we just set default
  ;; face with ASCII font and use default fontset for Unicode font.
  (interactive
   (let ((font-name (completing-read
                     "Font: " (mapcar #'car luna-font-alist) nil t))
         (font-size (read-number "Size: " 13)))
     (list (alist-get font-name luna-font-alist nil nil #'equal)
           font-size)))
  (let* ((specs (luna-font-expand-spec font-spec size))
         (ascii (apply #'font-spec (car specs)))
         (cjk (apply #'font-spec (cadr specs))))
    (apply #'set-face-attribute 'default nil :font ascii attrs)
    (set-fontset-font t 'kana cjk)
    (set-fontset-font t 'han cjk)
    (set-fontset-font t 'cjk-misc cjk)
    (set-fontset-font t 'symbol cjk nil 'append)))

(defun luna-load-font-spec (face font-spec size &rest attrs)
  "Load a FONT-SPEC for FACE.

FONT-SPEC should be a list (ASCII-FAMILY CJK-FAMILY CJK-SCALE
ASCII-SPEC CJK-SPEC), where ASCII-FAMILY is a ASCII font family,
CJK-FAMILY is the CJK font family, and SCJK-SCALE is the scale
factor of CJK font. ASCII-SPEC and CJK-SPEC are extra spec for
ASCII and CJK."
  (if (and (eq face 'default))
      (apply #'luna-load-default-font font-spec size attrs)
    (let* ((fontset
            (apply #'luna-create-fontset
                   (luna-font-expand-spec font-spec size))))
      (apply #'set-face-attribute face nil
             ;; We must set both ‘:font’ and ‘fontset’ for both ASCII
             ;; and non-ascii spec to take effect.
             :font fontset
             :fontset fontset
             attrs))))

(defun luna-load-font (face font-name size &rest attrs)
  "Set font for FACE to FONT-NAME.

If FONT-NAME is nil, use the first font in ‘luna-font-alist’.
SIZE is the font size in pt. Add additional face attributes in
ATTRS.

IF FONT-NAME doesn’t have a corresponding entry in ‘luna-font-alist’,
generate a font spec with FONT-NAME as the ASCII font and Source Han
Sans as the CJK font."
  (interactive
   (list (intern (completing-read
                  "Face: " (face-list)))
         (completing-read "Font: " (mapcar #'car luna-font-alist) nil t)
         (read-number "Size: " 13)))
  (let* ((font-spec (or (alist-get font-name luna-font-alist
                                   nil nil #'equal)
                        (list  font-name "Source Han Sans SC" 1)))
         (fontset
          (apply #'luna-create-fontset
                 (luna-font-expand-spec font-spec size))))
    (if (and (eq face 'default))
        (apply #'luna-load-default-font font-spec size attrs)
      (apply #'set-face-attribute face nil
             :font fontset
             :fontset fontset
             attrs))))

(defun luna-enable-apple-emoji ()
  "Enable Apple emoji display."
  (set-fontset-font t 'emoji (font-spec :family "Apple Color Emoji")
                    nil 'prepend))

(defun luna-set-buffer-font (font)
  "Make the current buffer use FONT."
  (interactive "MFont: ")
  (face-remap-set-base 'default `(:family ,font)))


(provide 'lunary)

;;; lunary.el ends here
